---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:

          ## Generating the testname for deployment
        - include_tasks: /ansible-utils/create_testname.yml

          ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /ansible-utils/update_litmus_result_resource.yml
          vars:
            status: 'SOT'
        
        - set_fact:
            director_url : "http://{{ director_ip }}:30380"

        - name : Check if namespace exists
          shell: kubectl get ns | grep {{ director_client_namespace }}
          register: result
          failed_when: result == ""

        - name : Fetch app state
          shell: kubectl get pods -n {{ director_client_namespace }}  | grep {{ item }} | awk '{print $3}' | awk -F':' '{print $1}' | tail -n 1
          register: app_status
          until: app_status.stdout == 'Running'
          with_items:
            - "{{ client_components }}"
          retries: 5
          delay: 4
        
        - name: Fetch pod ready status
          shell: kubectl get pods -n {{ director_client_namespace }} | grep {{ item }} | awk '{print $2}' | awk -F'/' '{print $1}' && kubectl get pods -n {{ director_client_namespace }} | grep {{ item }} | awk '{print $2}' | awk -F'/' '{print $2}'
          register: ready_status
          with_items:
            - "{{ client_components }}"
          failed_when: "{{ ready_status.stdout_lines | unique | length != 1 }}"
        
        - name: Check daemonset status
          shell: kubectl get ds -n {{ director_client_namespace }} | grep {{ item }} | awk '{print $2}'  && kubectl get ds -n {{ director_client_namespace }} | grep {{ item }} | awk '{print $3}' && kubectl get ds -n {{ director_client_namespace }} | grep {{ item }} | awk '{print $4}'
          with_items:
            - "{{ daemon_sets }}"
          register: daemonset_status
          failed_when: "{{ daemonset_status.stdout_lines | unique | length != 1 }}"
  
        - set_fact:
            flag: "Pass"

      rescue:
        - name: Setting fail flag
          set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /ansible-utils/update_litmus_result_resource.yml
          vars:
            status: 'EOT'