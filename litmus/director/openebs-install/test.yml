---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
  
    ## Generating the testname for deployment
    - include_tasks: /ansible-utils/create_testname.yml

    ## RECORD START-OF-TEST IN LITMUS RESULT CR
    - include_tasks: /ansible-utils/update_litmus_result_resource.yml
      vars:
        status: 'SOT'
      
    - set_fact:
        director_url : "http://{{ director_ip }}:30380"

    ## Getting the username
    - name: Get username
      shell: cat /etc/secret-volume/username
      register: username

    ## Getting the password     
    - name: Get password
      shell: cat /etc/secret-volume/password
      register: password
    
    - name: Fetch the project id of the cluster
      uri:
        url: "{{ director_url }}/v3/groups/{{ group_id }}/project"
        method: GET
        url_username: "{{ username.stdout }}"
        url_password: "{{ password.stdout }}"
        force_basic_auth: yes
        return_content: yes
        status_code: 200
      register: project_details

    ## Fetching project id
    - name: Fetching project id
      set_fact:
        project_id: "{{ project_details.json.data[0].id }}"
    
    ## Checking the node of connected Cluster
    - name: Get into node of the cluster
      uri:
        url: "{{ director_url }}/v3/groups/{{ group_id }}/clusters/{{ cluster_id }}/nodes"
        method: GET
        url_username: "{{ username }}"
        url_password: "{{ password }}"
        force_basic_auth: yes
        return_content: yes
        body_format: json
        status_code: 200,202
      register: node_cluster
    
    ## Getting node-1 id.
    - name: get node-1 id
      set_fact:
        node1_id: "{{ node1_cluster.json.data[0].id}}"
    
    ## Getting node-2 id.
    - name: get node-2 id
      set_fact:
        node2_id: "{{ node_cluster.json.data[1].id}}"

    ## Labeling the node-1 of connected Cluster with controlPlaneNode=true and dataPlaneNode=true
    - name: Giving POST request on labelnodes
      uri:
        url: "{{ director_url }}/v3/groups/{{ group_id }}/nodes/{{ node1_id }}/?action=labelnodes"
        method: POST
        url_username: "{{ username }}"
        url_password: "{{ password }}"
        force_basic_auth: yes
        return_content: yes
        body_format: json
        body: '{"controlPlaneNode": true, "dataPlaneNode": true}'
        status_code: 202

    ## Labeling the node-2 of connected Cluster with controlPlaneNode=true and dataPlaneNode=flase
    - name: Giving POST request on labelnodes
      uri:
        url: "{{ director_url }}/v3/groups/{{ group_id }}/nodes/{{ node2_id }}/?action=labelnodes"
        method: POST
        url_username: "{{ username }}"
        url_password: "{{ password }}"
        force_basic_auth: yes
        return_content: yes
        body_format: json
        body: '{"controlPlaneNode": true, "dataPlaneNode": false}'
        status_code: 202

    ## Creating openebs
    - name: Fetch openebses and create openebs
      uri:
        url: "{{ director_url }}/v3/groups/{{ group_id }}/openebses"
        method: POST
        url_username: "{{ username }}"
        url_password: "{{ password }}"
        force_basic_auth: yes
        return_content: yes
        body_format: json
        body: "{ \"clusterId\": \"{{ cluster_id }}\",\"creatorId\": \"{{ group_id }}\",\"projectId\": \"{{ project_id }}\",\"templateId\": \"{{ template_id }}\",\"namespace\": \"{{ namespace }}\",\"defaultDirectory\": \"{{ default_directory }}\",\"dockerRegistry\": \"{{ docker_registry }}\",\"includeDeviceFilters\": \"{{ include_device_filters }}\",\"excludeDeviceFilters\": \"{{ exclude_device_filters }}\",\"cpuResourceLimit\": \"{{ cpu_resource_limit }}\",\"memoryResourceLimit\": \" {{ memory_resource_limit }}\",\"installationMode\": \"{{ installation_mode }}\" }"
        status_code: 201
      register: install_openebs

    - name: Warning
      debug:
        msg: Openebs is Already  installed in your cluster.     
      when: "{{ install_openebs.json.status }} == 405"    

    - name: Getting the yaml for openebs installation
      set_fact:
        installopenebs: "{{ install_openebs.json.installationManifest }}"

    - name: Getting the id
      set_fact:
        openebs_id: "{{ install_openebs.json.id }}"

    - name: Getting into the openebs installation stage and checking the id
      uri:
        url: "{{ director_url }}/v3/groups/{{ group_id }}/openebses/{{ openebs_id }}"
        method: GET
        url_username: "{{ username }}"
        url_password: "{{ password }}"
        force_basic_auth: yes
        return_content: yes
        body_format: json
        status_code: 200
      register: install_openebs
      retries: 20
      delay: 5

    ## Installing openebs
    - name: Installing openebs on the cluster
      uri:
        url: "{{ director_url }}/v3/groups/{{ group_id }}/openebses/{{ openebs_id }}/?action=openebsinstall"
        method: POST
        url_username: "{{ username }}"
        url_password: "{{ password }}"
        force_basic_auth: yes
        return_content: yes
        body_format: json
        body: '{{ installopenebs }}'
        status_code: 200
      register: openebs
    
    ## Fetching job ID
    - name: Fetching Job Id to of openebsjob
      set_fact:
        openebs_job_id: "{{ openebs.json.id }}"
    
    - name: Fetch openebsjob details
      uri:
        url: "{{ director_url }}/v3/groups/1a14/openebsjobs/{{openebs_job_id}}"
        method: GET
        url_username: "{{ username }}"
        url_password: "{{ password }}"
        force_basic_auth: yes
        return_content: yes
        body_format: json
        status_code: 200
      register: openebs_job

    - name: Fetching openebsjob status
      set_fact:
        installed_or_not: "{{ openebs_job.json.jobStatus.phase }}"

    - fail:
        msg: "openEbs installation failed"
      when: "'{{  installed_or_not }}' != 'Online'"